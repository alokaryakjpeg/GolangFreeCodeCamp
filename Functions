1. Functions

Functions in Go can take zero or more arguments.

To make Go code easier to read, the variable type comes after the variable name.

For example, the following function:
func sub(x int, y int) int {
  return x-y
}
Here, func sub(x int, y int) int is known as the "function signature".

-----
Example 1:
package main

import "fmt"

func concat(s1 string, s2 string) string {
	return s1 + s2
}

// don't touch below this line

func main() {
	test("Lane,", " happy birthday!")
	test("Elon,", " hope that Tesla thing works out")
	test("Go", " is fantastic")
}

func test(s1 string, s2 string) {
	fmt.Println(concat(s1, s2))
}
-----

2. MULTIPLE PARAMETERS

When multiple arguments are of the same type, and are next to each other in the function signature, the type only needs to be declared after the last argument.

Here are some examples:
func addToDatabase(hp, damage int) {
  // ...
}
func addToDatabase(hp, damage int, name string) {
  // ?
}
func addToDatabase(hp, damage int, name string, level int) {
  // ?
}

3. DECLARATION SYNTAX

GO-STYLE SYNTAX
Go's declarations are clear, you just read them left to right, just like you would in English.

x int
p *int
a [3]int

It's nice for more complex signatures, it makes them easier to read.
f func(func(int,int) int, int) int

